{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNsVVT0CUOtve3xu9vz+EOE"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sa0Uf3_sJzoN",
        "outputId": "f3406f57-9e78-439b-dead-5c492768fce5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter a number:153\n",
            "153 is an amstrong number\n"
          ]
        }
      ],
      "source": [
        "num=int(input(\"enter a number:\"))\n",
        "sum=0\n",
        "temp=num\n",
        "while temp>0:\n",
        "  digit=temp%10\n",
        "  sum+=digit**3\n",
        "  temp//=10\n",
        "if num==sum:\n",
        "  print(num,\"is an amstrong number\")\n",
        "else:\n",
        "  print(num,\"is not an amstrong number\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n=int(input())\n",
        "tem=n\n",
        "p=len(str(n))\n",
        "n3=str(2)\n",
        "n4=n3[p:]\n",
        "if int(n3)==tem:\n",
        "  print(\"automarphic number\")\n",
        "else:\n",
        "  print(\"not a automarphic number\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gKErIHvFLyG1",
        "outputId": "b60dfd99-473f-4c88-fe2f-e2f94af71b60"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "389\n",
            "not a automarphic number\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n=0,1,1,2,3\n",
        "n=int(input())\n",
        "n1=0\n",
        "n2=1\n",
        "print(n1,n2,end=\"\")\n",
        "for i in range(2,n+1):\n",
        "  n3=n1+n2\n",
        "  n1=n2\n",
        "  n2=n3\n",
        "  print(n3,end=\"\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nqoHpay3Moli",
        "outputId": "9d2c026f-5515-469b-d05d-2833f362f964"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "135\n",
            "0 1123581321345589144233377610987159725844181676510946177112865746368750251213931964183178115142298320401346269217830935245785702887922746514930352241578173908816963245986102334155165580141267914296433494437701408733113490317018363119032971215073480752697677787420491258626902520365011074329512800995331629117386267571272139583862445225851433717365435296162591286729879956722026041154800875592025047307819614052739537881655747031984210610209857723171676801775652777789003528844945570212853727234602481411176690304609941903924907091353080615211701294984540118792648065155330493931304969544928657211148507797805034164546229067075527939700884757894439432379146414472334024676221234167283484676853788906237314390661305790721611591991948530947554971605006438163670882596954969111225854201961407274896736798916376386122581100087778366101931177997941600471418928800671943708161204660046610375530309754011380474634642912200160415121876738197402742198682231673194043463499009990551680708854858323072836211434898484229771353018523447067460492189229958345551690263542248481792619150755731478440138170841019273726921930789991761500520536206896083277242789322839997508245339284137646068711657306356306993006846248183102847207576137174139131664102775062056366209626925748508234281076009435667762588548447381057049252476708912581411411405930102594397055221918455182579303309636633329861112681897706691855248316295261201016328488578177407943098723020343712649370320429973934883222046711111473984623691759331164814351698201718008153583592549909666408718408670007398507948658051921140283666534989152989237612269837405200686395697568236726740705505779255899443594251147575126432128751259615185546301842246877456815557697022053106568164969325172882568354948815042426140730579590408055383207395465903462158763004198249821510663404174917105958145721691725375039079340637797070384279171545657105123361164255345170904956503918714087129377308805952221443105020355490"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "WqwtZvJQNfxm"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}